#
# This script uses gcode_definition.txt to generate look-up tables
# and a code skeleton for all the G-code functionality
#
import datetime
today = str(datetime.date.today())

# Protocol definition parse
gd = open('gcode_definition.txt','r')
commands = []
comments = {}
for line in gd:
    # Skip comments
    if line[0:2] == '//':
        continue

    # Read each command and load into arrays
    command, comment = line.strip('\n').split(': ')
    commands.append(command)
    comments[command] = comment
gd.close()


# -------------------------------------------------------------------------------
# gcode_functions.h
gh = open('gcode_functions.h','w')
gh.write('''//
// This file is generated by generate_gcode.py and should not be edited manually!
//
// gcode_functions.h
// generated on ''' + today + '''
//

#ifndef GCODE_FUNCTIONS_H
#define GCODE_FUNCTIONS_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

''')
for command in commands:
    gh.write('// ' + command + '_f(char *s)\n')
    gh.write('// ' + command + ': ' + comments[command] + '\n')
    gh.write('int32_t ' + command + '_f();\n\n')
gh.write('#endif')
gh.close()


# -------------------------------------------------------------------------------
# gcode_functions_template.c
gc = open('gcode_functions_template.c','w')
gc.write('''//
// This file is generated by generate_gcode.py and should be copied 
// before implementing functions so it isn't overwritten!
//
// gcode_functions_template.c
// generated on ''' + today + '''
//

#include "gcode_functions.h"
#include "gcode.h"

''')
for command in commands:
    gc.write('// ' + command + '_f(const char *s)\n')
    gc.write('// ' + command + ': ' + comments[command] + '\n')
    gc.write('int32_t ' + command + '_f(char *s) {\n')
    gc.write('    printf("' + command + '_f(const char *s) is not yet implemented!\\n");\n')
    gc.write('    printf("%s\\n", s);\n')
    gc.write('    return 1;\n}\n\n')
gc.close()


# -------------------------------------------------------------------------------
# gcode_lookup.h
gl = open('gcode_lookup.h','w')
gl.write('''//
// This file is generated by generate_gcode.py and should not be edited manually!
//
// gcode_lookup.h
// generated on ''' + today + '''
//

#ifndef GCODE_LOOKUP_H
#define GCODE_LOOKUP_H

#include "gcode_functions.h"

typedef int32_t (*gcode_function)();

typedef struct {
    char type;
    int32_t id;
    gcode_function fp;
} gcode_function_t;

typedef struct {
    char type;
    gcode_function_t *subtree;
} gcode_type_t;

''')

# Sort commands into G, M, N, ... subtrees
command_classes = {}
for command in commands:
    # Create empty list for new key
    if not command_classes.has_key(command[0]):
        command_classes[command[0]] = []
    # If command is not empty (e.g G1 not G)
    if command[1:]:
        command_classes[command[0]].append(int(command[1:]))

#Generate integer part och command search tree
for k in command_classes.keys():
    gl.write('gcode_function_t gcode_' + k + '_subtree[] = {{\'' + k + '\',-1,&' + k  + '_f}')
    for c in sorted(command_classes[k]):
        gl.write(',{\'' + k + '\',' + str(c) + ',&' + k + str(c)  + '_f}')
    gl.write(',{0,0,&' + k + '_f}};\n')

#Generate char part of command search tree
gl.write('gcode_type_t gcode_types[] = {')
for k in command_classes.keys():
    gl.write('{\'' + k + '\',gcode_' + k + '_subtree},')
gl.write('{0,NULL}};\n\n')

gl.write('#endif')
gl.close()
